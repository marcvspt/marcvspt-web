---
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";

import { SITE_PAGES } from "@/scripts/data.js";

// Get all blog posts from markdown files
const allPosts = await Astro.glob("./*.md");

// Process and sort posts
const processedPosts = allPosts
  .map((post) => ({
    ...post.frontmatter,
    url: post.url,
  }))
  .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

const categories = [...new Set(processedPosts.map((post) => post.category))];
const featuredPosts = processedPosts.filter((post) => post.featured);
const totalPosts = processedPosts.length;
const avgReadTime = Math.round(
  processedPosts.reduce((acc, post) => acc + parseInt(post.readTime), 0) /
    totalPosts,
);
---

<Layout title={SITE_PAGES.Blog.title} description={SITE_PAGES.Blog.description}>
  <Header />

  <main class="pt-16">
    <!-- Hero Section -->
    <section
      class="bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 py-20"
    >
      <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center">
          <h1 class="text-4xl md:text-6xl font-bold mb-6">
            <span
              class="bg-gradient-to-r from-blue-400 to-blue-600 bg-clip-text text-transparent"
            >
              Blog
            </span>
          </h1>
          <p class="text-xl text-slate-300 max-w-2xl mx-auto mb-8">
            Artículos sobre desarrollo web, tecnología y las últimas tendencias
            en programación
          </p>

          <!-- Stats -->
          <div class="flex flex-wrap justify-center gap-8 mb-8">
            <div class="text-center">
              <div class="text-3xl font-bold text-blue-400">{totalPosts}</div>
              <div class="text-slate-400 text-sm">Artículos</div>
            </div>
            <div class="text-center">
              <div class="text-3xl font-bold text-blue-400">
                {categories.length}
              </div>
              <div class="text-slate-400 text-sm">Categorías</div>
            </div>
            <div class="text-center">
              <div class="text-3xl font-bold text-blue-400">
                {avgReadTime}
              </div>
              <div class="text-slate-400 text-sm">Min promedio</div>
            </div>
          </div>

          <!-- Search Bar -->
          <div class="max-w-md mx-auto">
            <div class="relative">
              <input
                type="text"
                id="searchInput"
                placeholder="Buscar artículos..."
                class="w-full px-4 py-3 pl-12 bg-slate-800/50 border border-slate-700 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 transition-all duration-300"
              />
              <svg
                class="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Filter Categories -->
    <section
      class="bg-slate-800/30 py-8 sticky top-16 z-40 backdrop-blur-sm border-b border-slate-700"
    >
      <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex flex-wrap justify-center gap-3">
          <button
            class="category-filter active px-4 py-2 bg-blue-600 text-white rounded-full text-sm font-medium transition-all duration-300 hover:bg-blue-500"
            data-category="all"
          >
            Todos ({totalPosts})
          </button>
          {
            categories.map((category) => {
              const count = processedPosts.filter(
                (post) => post.category === category,
              ).length;
              return (
                <button
                  class="category-filter px-4 py-2 bg-slate-700 text-slate-300 rounded-full text-sm font-medium transition-all duration-300 hover:bg-slate-600 hover:text-white"
                  data-category={category}
                >
                  {category} ({count})
                </button>
              );
            })
          }
        </div>
      </div>
    </section>

    <!-- Sort Options -->
    <section class="bg-slate-900 py-6">
      <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex flex-wrap justify-between items-center gap-4">
          <div class="flex items-center gap-4">
            <span class="text-slate-400 text-sm">Ordenar por:</span>
            <select
              id="sortSelect"
              class="bg-slate-800 border border-slate-700 text-white px-3 py-2 rounded-lg text-sm focus:outline-none focus:border-blue-500"
            >
              <option value="date-desc">Más recientes</option>
              <option value="date-asc">Más antiguos</option>
              <option value="title-asc">Título A-Z</option>
              <option value="title-desc">Título Z-A</option>
              <option value="readtime-asc">Lectura rápida</option>
              <option value="readtime-desc">Lectura larga</option>
            </select>
          </div>

          <div class="flex items-center gap-4">
            <span class="text-slate-400 text-sm">Vista:</span>
            <div class="flex bg-slate-800 rounded-lg p-1">
              <button
                id="gridView"
                class="view-toggle active px-3 py-1 rounded text-sm transition-all duration-300"
              >
                <svg
                  class="w-4 h-4"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"
                  ></path>
                </svg>
              </button>
              <button
                id="listView"
                class="view-toggle px-3 py-1 rounded text-sm transition-all duration-300"
              >
                <svg
                  class="w-4 h-4"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- All Posts -->
    <section class="py-16 bg-slate-800/30">
      <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 class="text-3xl font-bold text-center mb-12 text-white">
          Todos los Artículos
        </h2>

        <div
          id="postsContainer"
          class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8"
        >
          {
            processedPosts.map((post, index) => (
              <article
                class={`post-card group bg-slate-800/80 backdrop-blur-sm rounded-xl overflow-hidden border border-slate-700 hover:border-blue-500/50 transition-all duration-300 hover:transform hover:scale-105 animate-slide-up`}
                style={`animation-delay: ${index * 0.1}s`}
                data-category={post.category}
                data-title={post.title.toLowerCase()}
                data-tags={post.tags.join(" ").toLowerCase()}
                data-date={post.date}
                data-readtime={parseInt(post.readTime)}
              >
                <div class="relative overflow-hidden">
                  <img
                    src={post.image}
                    alt={post.title}
                    class="w-full h-48 object-cover group-hover:scale-110 transition-transform duration-500"
                  />
                  <div class="absolute top-4 left-4">
                    <span class="bg-slate-900/80 text-white px-3 py-1 rounded-full text-sm font-medium">
                      {post.category}
                    </span>
                  </div>
                  {post.featured && (
                    <div class="absolute top-4 right-4">
                      <svg
                        class="w-6 h-6 text-yellow-400"
                        fill="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                      </svg>
                    </div>
                  )}
                </div>

                <div class="p-6">
                  <div class="flex items-center text-sm text-slate-400 mb-3">
                    <time>
                      {new Date(post.date).toLocaleDateString("es-ES", {
                        year: "numeric",
                        month: "long",
                        day: "numeric",
                      })}
                    </time>
                    <span class="mx-2">•</span>
                    <span>{post.readTime}</span>
                  </div>

                  <h3 class="text-xl font-bold text-white mb-3 group-hover:text-blue-400 transition-colors duration-300">
                    {post.title}
                  </h3>

                  <p class="text-slate-300 mb-4 line-clamp-3">{post.excerpt}</p>

                  <div class="flex flex-wrap gap-2 mb-4">
                    {post.tags.slice(0, 2).map((tag) => (
                      <span class="px-2 py-1 bg-slate-700 text-slate-300 text-xs rounded-md">
                        {tag}
                      </span>
                    ))}
                    {post.tags.length > 2 && (
                      <span class="px-2 py-1 bg-slate-600 text-slate-400 text-xs rounded-md">
                        +{post.tags.length - 2}
                      </span>
                    )}
                  </div>

                  <a
                    href={post.url}
                    class="inline-flex items-center text-blue-400 hover:text-blue-300 font-medium transition-colors duration-300"
                  >
                    Leer más
                    <svg
                      class="ml-2 w-4 h-4 group-hover:translate-x-1 transition-transform duration-300"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 5l7 7-7 7"
                      />
                    </svg>
                  </a>
                </div>
              </article>
            ))
          }
        </div>

        <!-- No results message -->
        <div id="noResults" class="hidden text-center py-12">
          <div class="text-slate-400 text-lg mb-4">
            <svg
              class="w-16 h-16 mx-auto mb-4 opacity-50"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.47-.881-6.08-2.33"
              ></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-slate-300 mb-2">
            No se encontraron artículos
          </h3>
          <p class="text-slate-400">
            Intenta con otros términos de búsqueda o categorías
          </p>
        </div>
      </div>
    </section>
  </main>

  <Footer />
</Layout>

<script>
  // Variables globales para mantener el estado
  let searchState = {
    currentCategory: "all",
    currentSearch: "",
    currentSort: "date-desc",
    currentView: "grid",
    postsArray: [],
  };

  function initializeSearchFunctionality() {
    // Obtener elementos del DOM
    const searchInput = document.getElementById(
      "searchInput",
    ) as HTMLInputElement;
    const postsContainer = document.getElementById(
      "postsContainer",
    ) as HTMLElement;
    const noResults = document.getElementById("noResults") as HTMLElement;
    const postCards = document.querySelectorAll(
      ".post-card",
    ) as NodeListOf<HTMLElement>;
    const categoryFilters = document.querySelectorAll(
      ".category-filter",
    ) as NodeListOf<HTMLButtonElement>;
    const sortSelect = document.getElementById(
      "sortSelect",
    ) as HTMLSelectElement;
    const gridView = document.getElementById("gridView") as HTMLButtonElement;
    const listView = document.getElementById("listView") as HTMLButtonElement;

    // Verificar que los elementos existen
    if (!searchInput || !postsContainer) return;

    // Actualizar array de posts
    searchState.postsArray = Array.from(postCards);

    // Función para filtrar y ordenar posts
    function filterAndSortPosts() {
      let visibleCount = 0;

      // Ordenar posts
      searchState.postsArray.sort((a, b) => {
        const aTitle = a.dataset.title || "";
        const bTitle = b.dataset.title || "";
        const aDate = new Date(a.dataset.date || "").getTime();
        const bDate = new Date(b.dataset.date || "").getTime();
        const aReadTime = parseInt(a.dataset.readtime || "0");
        const bReadTime = parseInt(b.dataset.readtime || "0");

        switch (searchState.currentSort) {
          case "date-asc":
            return aDate - bDate;
          case "date-desc":
            return bDate - aDate;
          case "title-asc":
            return aTitle.localeCompare(bTitle);
          case "title-desc":
            return bTitle.localeCompare(aTitle);
          case "readtime-asc":
            return aReadTime - bReadTime;
          case "readtime-desc":
            return bReadTime - aReadTime;
          default:
            return bDate - aDate;
        }
      });

      // Limpiar container y reordenar posts
      postsContainer.innerHTML = "";
      searchState.postsArray.forEach((card) => {
        const category = card.dataset.category || "";
        const title = card.dataset.title || "";
        const tags = card.dataset.tags || "";

        const matchesCategory =
          searchState.currentCategory === "all" ||
          category === searchState.currentCategory;
        const matchesSearch =
          searchState.currentSearch === "" ||
          title
            .toLowerCase()
            .includes(searchState.currentSearch.toLowerCase()) ||
          tags.toLowerCase().includes(searchState.currentSearch.toLowerCase());

        if (matchesCategory && matchesSearch) {
          card.style.display = "block";
          postsContainer.appendChild(card);
          visibleCount++;
        } else {
          card.style.display = "none";
        }
      });

      // Mostrar/ocultar mensaje de no resultados
      if (noResults) {
        if (visibleCount === 0) {
          noResults.classList.remove("hidden");
          postsContainer.classList.add("hidden");
        } else {
          noResults.classList.add("hidden");
          postsContainer.classList.remove("hidden");
        }
      }
    }

    // Restaurar valores de los inputs
    if (searchInput) {
      searchInput.value = searchState.currentSearch;
    }
    if (sortSelect) {
      sortSelect.value = searchState.currentSort;
    }

    // Remover listeners existentes para evitar duplicados
    const newSearchInput = searchInput.cloneNode(true) as HTMLInputElement;
    searchInput.parentNode?.replaceChild(newSearchInput, searchInput);

    // Event listener para búsqueda
    newSearchInput?.addEventListener("input", (e) => {
      searchState.currentSearch = (e.target as HTMLInputElement).value;
      filterAndSortPosts();
    });

    // Event listeners para filtros de categoría
    categoryFilters.forEach((button) => {
      // Remover listeners existentes
      const newButton = button.cloneNode(true) as HTMLButtonElement;
      button.parentNode?.replaceChild(newButton, button);

      newButton.addEventListener("click", () => {
        // Remover clase activa de todos los botones
        document.querySelectorAll(".category-filter").forEach((btn) => {
          btn.classList.remove("active", "bg-blue-600", "text-white");
          btn.classList.add("bg-slate-700", "text-slate-300");
        });

        // Agregar clase activa al botón clickeado
        newButton.classList.add("active", "bg-blue-600", "text-white");
        newButton.classList.remove("bg-slate-700", "text-slate-300");

        searchState.currentCategory = newButton.dataset.category || "all";
        filterAndSortPosts();
      });

      // Restaurar estado activo
      if (button.dataset.category === searchState.currentCategory) {
        button.classList.add("active", "bg-blue-600", "text-white");
        button.classList.remove("bg-slate-700", "text-slate-300");
      }
    });

    // Event listener para ordenamiento
    if (sortSelect) {
      const newSortSelect = sortSelect.cloneNode(true) as HTMLSelectElement;
      sortSelect.parentNode?.replaceChild(newSortSelect, sortSelect);
      newSortSelect.value = searchState.currentSort;

      newSortSelect.addEventListener("change", (e) => {
        searchState.currentSort = (e.target as HTMLSelectElement).value;
        filterAndSortPosts();
      });
    }

    // Event listeners para vista
    if (gridView) {
      const newGridView = gridView.cloneNode(true) as HTMLButtonElement;
      gridView.parentNode?.replaceChild(newGridView, gridView);

      newGridView.addEventListener("click", () => {
        searchState.currentView = "grid";
        newGridView.classList.add("active", "bg-blue-600", "text-white");
        newGridView.classList.remove("text-slate-400");

        const currentListView = document.getElementById("listView");
        if (currentListView) {
          currentListView.classList.remove(
            "active",
            "bg-blue-600",
            "text-white",
          );
          currentListView.classList.add("text-slate-400");
        }

        postsContainer.className =
          "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8";
      });
    }

    if (listView) {
      const newListView = listView.cloneNode(true) as HTMLButtonElement;
      listView.parentNode?.replaceChild(newListView, listView);

      newListView.addEventListener("click", () => {
        searchState.currentView = "list";
        newListView.classList.add("active", "bg-blue-600", "text-white");
        newListView.classList.remove("text-slate-400");

        const currentGridView = document.getElementById("gridView");
        if (currentGridView) {
          currentGridView.classList.remove(
            "active",
            "bg-blue-600",
            "text-white",
          );
          currentGridView.classList.add("text-slate-400");
        }

        postsContainer.className = "space-y-6";

        // Modificar cards para vista de lista
        searchState.postsArray.forEach((card) => {
          if (card.style.display !== "none") {
            card.className = card.className.replace("hover:scale-105", "");
          }
        });
      });
    }

    // Restaurar estado de vista
    if (searchState.currentView === "grid") {
      gridView?.classList.add("active", "bg-blue-600", "text-white");
      listView?.classList.add("text-slate-400");
      postsContainer.className =
        "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8";
    } else {
      listView?.classList.add("active", "bg-blue-600", "text-white");
      gridView?.classList.add("text-slate-400");
      postsContainer.className = "space-y-6";
    }

    // Ejecutar filtrado inicial
    filterAndSortPosts();
  }

  // Ejecutar en carga inicial
  document.addEventListener("DOMContentLoaded", initializeSearchFunctionality);

  // Ejecutar después de cada View Transition
  document.addEventListener("astro:page-load", initializeSearchFunctionality);
</script>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .animate-slide-up {
    opacity: 0;
    transform: translateY(20px);
    animation: slideUp 0.6s ease-out forwards;
  }

  @keyframes slideUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .view-toggle.active {
    background-color: rgb(37 99 235);
    color: white;
  }
</style>
