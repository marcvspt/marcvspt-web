---
import BaseLayout from "@/layouts/BaseLayout.astro";

import Tags from "@/components/Tags.astro";

import { getFormatedDate } from "@/scripts/utils";

const { frontmatter } = Astro.props;

const { title, pubDate, updtPubDate, image, tags } = frontmatter;
const newPubDate = getFormatedDate(pubDate);
const newUpdtPubDate = getFormatedDate(updtPubDate);
const plainPubDate: any = getFormatedDate(pubDate, "plain");
const plainUpdtPubDate: any = getFormatedDate(updtPubDate, "plain");
---

<BaseLayout pageTitle={title} headerTitle="Blog">
    <article>
        <h1 class="text-4xl font-bold" transition:name=`post-title-${title}`>
            {title}
        </h1>
        <p
            class="text-accent/80 dark:text-secondary mb-1"
            transition:name=`post-pubdate-${title}`
        >
            Publicado el: <time datetime={plainPubDate}>{newPubDate}</time>
        </p>
        {
            newUpdtPubDate && (
                <p class="text-accent/80 dark:text-secondary mt-1 ">
                    Actualizado el:{" "}
                    <time datetime={plainUpdtPubDate}>{newUpdtPubDate}</time>
                </p>
            )
        }
        <div class="flex flex-col justify-center items-center">
            <img
                id="hero-image"
                class="w-auto h-auto max-h-[48rem] mb-0"
                src={image?.path}
                alt={image?.alt}
                transition:name=`post-image-${title}`
            />
            <Tags tags={tags} />
        </div>
        <main
            id="post-content"
            class="prose-a:text-accent-dark prose-a:dark:text-secondary prose-a:hover:underline prose-img:rounded-xl prose-headings:italic prose-headings:underline prose-li:[list-style:initial]"
        >
            <slot />
        </main>
    </article>
</BaseLayout>

<script is:inline>
    function createSvgIcon(pathD) {
        const $svgEl = document.createElementNS(
            "http://www.w3.org/2000/svg",
            "svg",
        );
        const $svgElPath = document.createElementNS(
            "http://www.w3.org/2000/svg",
            "path",
        );

        // Aplicando clases de Tailwind
        $svgEl.classList.add("fill-none", "stroke-current", "w-5", "h-5");
        $svgEl.setAttribute("viewBox", "0 0 24 24");
        $svgEl.setAttribute("stroke-width", "2");

        $svgElPath.setAttribute("d", pathD);

        $svgEl.appendChild($svgElPath);
        return $svgEl;
    }

    const copyToClipboard = async (text) => {
        try {
            await navigator.clipboard.writeText(text);
        } catch (err) {
            console.error("Error al copiar:", err);
        }
    };
    function initializeElements() {
        // Manejo de imágenes (evita duplicaciones)
        document.querySelectorAll("img:not(#hero-image)").forEach(($imgEl) => {
            if ($imgEl.querySelector(".image-container")) return;
            const $imgContainer = document.createElement("div");
            $imgContainer.classList.add("image-container");

            $imgEl.parentNode.insertBefore($imgContainer, $imgEl);
            $imgContainer.appendChild($imgEl);
        });

        // Manejo de bloques de código (evita duplicaciones)
        document.querySelectorAll("pre").forEach(($pre) => {
            /* Create Code Block Header */
            if ($pre.querySelector(".code-block-header")) return;

            const $header = document.createElement("div");
            $header.classList.add("code-block-header");

            const $lang = Object.assign(document.createElement("span"), {
                id: "code-lang",
                classList: ("text-xs", "uppercase"),
                textContent: $pre.getAttribute("data-language") || "code",
            });

            const $code = $pre.querySelector("code");
            $code.classList.add("code-block");

            /* Copy Code Block Elements */
            const $copyButton = document.createElement("button");
            $copyButton.classList.add("code-block-copy");

            const $copyIcon = createSvgIcon(
                "M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z",
            );
            const $checkIcon = createSvgIcon("M5 13l4 4L19 7");
            $checkIcon.classList.add("hidden");

            $copyButton.append($copyIcon, $checkIcon);

            $header.append($lang, $copyButton);
            $pre.prepend($header);

            /* Copy Code Block */
            $copyButton.onclick = () => {
                if ($code) {
                    copyToClipboard($code.textContent);
                    $copyIcon.classList.add("hidden");
                    $checkIcon.classList.remove("hidden");
                    setTimeout(() => {
                        $copyIcon.classList.remove("hidden");
                        $checkIcon.classList.add("hidden");
                    }, 2000);
                }
            };
        });
    }

    // Ejecutar en carga inicial y después de un swap de Astro
    initializeElements();
    document.addEventListener("astro:after-swap", initializeElements);
</script>
