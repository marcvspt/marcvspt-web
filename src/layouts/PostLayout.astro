---
import BaseLayout from "@/layouts/BaseLayout.astro"

import Tags from "@/components/Tags.astro"

import { getFormatedDate } from "@/scripts/utils"

const { frontmatter } = Astro.props

const { title, pubDate, updtPubDate, image, tags } = frontmatter
const newPubDate = getFormatedDate(pubDate)
const newUpdtPubDate = getFormatedDate(updtPubDate)

const plainPubDate: any = getFormatedDate(pubDate, "plain")
const plainUpdtPubDate: any = getFormatedDate(updtPubDate, "plain")
---

<BaseLayout pageTitle={title} headerTitle="Blog">
    <article>
        <h1 class="text-4xl font-bold" transition:name=`post-title-${title}`>
            {title}
        </h1>
        <p
            class="text-accent/80 dark:text-secondary mb-1"
            transition:name=`post-pubdate-${title}`
        >
            Publicado el: <time datetime={plainPubDate}>{newPubDate}</time>
        </p>
        {
            newUpdtPubDate && (
                <p class="text-accent/80 dark:text-secondary mt-1 ">
                    Actualizado el:{" "}
                    <time datetime={plainUpdtPubDate}>{newUpdtPubDate}</time>
                </p>
            )
        }
        <div class="flex flex-col justify-center items-center">
            <img
                id="hero-image"
                class="w-auto h-auto max-h-[48rem] my-0"
                src={image?.path}
                alt={image?.alt}
                transition:name=`post-image-${title}`
            />
            <Tags tags={tags} />
        </div>
        <main
            id="post-content"
            class="prose-a:text-accent-dark prose-a:dark:text-secondary prose-a:hover:underline prose-img:rounded-xl prose-headings:italic prose-headings:underline prose-li:[list-style:initial]"
        >
            <slot />
        </main>
    </article>
</BaseLayout>

<script is:inline>
    function initializeCodeBlocks() {
        const $postImages = document.querySelectorAll("img:not(#hero-image)")

        $postImages.forEach(($imgEl) => {
            const $imgContainer = document.createElement("div")
            $imgContainer.classList.add(
                "flex",
                "flex-col",
                "justify-center",
                "items-center",
            )

            $imgEl.parentNode.insertBefore($imgContainer, $imgEl)
            $imgContainer.appendChild($imgEl)
            $imgEl.classList.add("w-auto", "max-h-[42rem]")
        })

        function createSvgIcon(pathD) {
            const $svgEl = document.createElementNS(
                "http://www.w3.org/2000/svg",
                "svg",
            )
            const $svgElPath = document.createElementNS(
                "http://www.w3.org/2000/svg",
                "path",
            )

            // Aplicando clases de Tailwind
            $svgEl.classList.add("fill-none", "stroke-current", "w-5", "h-5")
            $svgEl.setAttribute("viewBox", "0 0 24 24")
            $svgEl.setAttribute("stroke-width", "2")

            $svgElPath.classList.add(
                "stroke-linecap-round",
                "stroke-linejoin-round",
            )
            $svgElPath.setAttribute("d", pathD)

            $svgEl.appendChild($svgElPath)
            return $svgEl
        }

        // Función para copiar (se mantiene igual)
        function copyToClipboard(text) {
            navigator.clipboard
                .writeText(text)
                .then(() => {
                    // El estado del botón se maneja en el evento click
                })
                .catch((err) => {
                    console.error("Error al copiar:", err)
                })
        }

        document.querySelectorAll("pre").forEach(($preCodeBlock) => {
            // Contenedor principal del código
            $preCodeBlock.classList.add("relative", "pt-10", "rounded-xl")

            // Crear header del código
            const $codeBlockHeader = document.createElement("div")
            $codeBlockHeader.classList.add(
                "absolute",
                "top-0",
                "left-0",
                "right-0",
                "flex",
                "justify-between",
                "items-center",
                "px-4",
                "py-2",
                "bg-secondary/60",
                "dark:bg-secondary-dark/50",
                "rounded-t-lg",
            )

            // Span del lenguaje
            const $spanLang = document.createElement("span")
            $spanLang.classList.add("text-xs", "uppercase")
            $spanLang.textContent =
                $preCodeBlock.getAttribute("data-language") || "code"

            // Botón de copiar
            const $copyButton = document.createElement("button")
            $copyButton.classList.add(
                "bg-transparent",
                "border-none",
                "hover:text-white",
                "p-1",
                "rounded-md",
                "transition-colors",
                "duration-200",
            )

            // Íconos SVG
            const $copyIcon = createSvgIcon(
                "M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z",
            )
            const $checkIcon = createSvgIcon("M5 13l4 4L19 7")
            $checkIcon.classList.add("hidden")

            // Añadir íconos y eventos
            $copyButton.append($copyIcon, $checkIcon)
            $copyButton.addEventListener("click", () => {
                const $codeBlock = $preCodeBlock.querySelector("code")
                if ($codeBlock) {
                    copyToClipboard($codeBlock.textContent)

                    $copyIcon.classList.add("hidden")
                    $checkIcon.classList.remove("hidden")

                    setTimeout(() => {
                        $copyIcon.classList.remove("hidden")
                        $checkIcon.classList.add("hidden")
                    }, 2000)
                }
            })

            // Construir el header
            $codeBlockHeader.append($spanLang, $copyButton)
            $preCodeBlock.prepend($codeBlockHeader)

            // Ajustar el código interno
            const $code = $preCodeBlock.querySelector("code")
            if ($code) {
                $code.classList.add("pt-4", "block")
            }
        })
    }

    // Inicializar al cargar la página
    initializeCodeBlocks()

    // Escuchar el evento astro:after-swap
    document.addEventListener("astro:after-swap", () => {
        initializeCodeBlocks()
    })
</script>
