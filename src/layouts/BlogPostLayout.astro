---
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";

export interface Props {
  frontmatter: {
    id: number;
    title: string;
    excerpt: string;
    date: string;
    updated?: string;
    readTime: string;
    category: string;
    tags: string[];
    image: string;
    featured: boolean;
  };
}

const { frontmatter } = Astro.props;
const {
  title,
  excerpt,
  date,
  updated,
  readTime,
  category,
  tags,
  image,
  featured,
} = frontmatter;

// Format dates
const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString("es-ES", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
};
---

<Layout title={`Blog - ${title}`} description={excerpt}>
  <Header />

  <main class="pt-16">
    <!-- Hero Section -->
    <article class="bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
        <!-- Breadcrumb -->
        <nav class="mb-8 animate-fade-in">
          <ol class="flex items-center space-x-2 text-sm text-slate-400">
            <li>
              <a
                href="/"
                class="hover:text-blue-400 transition-colors duration-300"
                >Inicio</a
              >
            </li>
            <li><span class="mx-2">/</span></li>
            <li>
              <a
                href="/blog"
                class="hover:text-blue-400 transition-colors duration-300"
                >Blog</a
              >
            </li>
            <li><span class="mx-2">/</span></li>
            <li class="text-slate-300">{title}</li>
          </ol>
        </nav>

        <!-- Category and Featured Badge -->
        <div
          class="flex items-center gap-3 mb-6 animate-slide-up"
          style="animation-delay: 0.1s;"
        >
          <span
            class="bg-blue-600/90 text-white px-4 py-2 rounded-full text-sm font-medium"
          >
            {category}
          </span>
          {
            featured && (
              <span class="bg-gradient-to-r from-yellow-500 to-yellow-600 text-white px-4 py-2 rounded-full text-sm font-medium flex items-center gap-2">
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                </svg>
                Destacado
              </span>
            )
          }
        </div>

        <!-- Title -->
        <h1
          class="text-4xl md:text-5xl lg:text-6xl font-bold text-white mb-6 leading-tight animate-slide-up"
          style="animation-delay: 0.2s;"
        >
          {title}
        </h1>

        <!-- Excerpt -->
        <p
          class="text-xl text-slate-300 mb-8 leading-relaxed animate-slide-up"
          style="animation-delay: 0.3s;"
        >
          {excerpt}
        </p>

        <!-- Meta Information -->
        <div
          class="flex flex-wrap items-center gap-6 text-slate-400 mb-8 animate-slide-up"
          style="animation-delay: 0.4s;"
        >
          <div class="flex items-center gap-2">
            <svg
              class="w-5 h-5"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
              ></path>
            </svg>
            <time datetime={date}>Publicado: {formatDate(date)}</time>
          </div>

          {
            updated && (
              <div class="flex items-center gap-2">
                <svg
                  class="w-5 h-5"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                  />
                </svg>
                <time datetime={updated}>
                  Actualizado: {formatDate(updated)}
                </time>
              </div>
            )
          }

          <div class="flex items-center gap-2">
            <svg
              class="w-5 h-5"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span
              >{
                readTime /* TODO: agregar tiempos de lectura o cambiar atributo */
              }</span
            >
          </div>
        </div>

        <!-- Tags -->
        <div
          class="flex flex-wrap gap-2 animate-slide-up"
          style="animation-delay: 0.5s;"
        >
          {
            /* TODO: agregar enlace para ver articulos con esos tags */
            tags.map((tag) => (
              <span class="px-3 py-1 bg-slate-800/60 border border-slate-700 text-slate-300 text-sm rounded-md hover:bg-slate-700/60 hover:border-blue-500/50 transition-all duration-300">
                #{tag}
              </span>
            ))
          }
        </div>
      </div>

      <!-- Hero Image -->
      <div
        class="relative overflow-hidden animate-slide-up pb-16"
        style="animation-delay: 0.6s;"
      >
        <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
          <div class="relative rounded-2xl overflow-hidden shadow-2xl">
            <img
              src={image}
              alt={title}
              class="w-full h-64 md:h-80 lg:h-96 object-cover"
            />
            <div
              class="absolute inset-0 bg-gradient-to-t from-slate-900/20 to-transparent"
            >
            </div>
          </div>
        </div>
      </div>
    </article>

    <!-- Content -->
    <section class="bg-slate-900 py-16">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div
          class="bg-slate-800/30 backdrop-blur-sm rounded-2xl border border-slate-700 p-8 md:p-12"
        >
          <!-- Markdown Content -->
          <div class="prose prose-lg prose-invert max-w-none">
            <slot />
          </div>

          <!-- Share Section -->
          <div class="mt-16 pt-8 border-t border-slate-700">
            <h3 class="text-xl font-semibold text-white mb-6">
              Compartir este artículo
            </h3>
            <div class="flex flex-wrap gap-4">
              <button
                class="flex items-center gap-2 px-4 py-2 bg-slate-700 hover:bg-slate-600 text-white rounded-lg transition-colors duration-300"
              >
                <svg
                  class="w-5 h-5"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"
                  ></path>
                </svg>
                Copiar enlace
              </button>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Back to Blog -->
    <section class="bg-slate-900 py-12">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <a
          href="/blog"
          class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-slate-700 to-slate-800 hover:from-slate-600 hover:to-slate-700 text-white font-semibold rounded-lg transition-all duration-300 border border-slate-600 hover:border-blue-500/50"
        >
          <svg
            class="mr-2 w-5 h-5"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
          </svg>
          Volver al Blog
        </a>
      </div>
    </section>
  </main>

  <Footer />
</Layout>

<script>
  // Copy link functionality
  document.addEventListener("DOMContentLoaded", () => {
    const copyButton = document.querySelector(
      'button:has(svg path[d*="M8.684"])',
    );

    copyButton?.addEventListener("click", async () => {
      try {
        await navigator.clipboard.writeText(window.location.href);

        // Visual feedback
        const originalText = copyButton.innerHTML;
        copyButton.innerHTML = `
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
          ¡Copiado!
        `;

        setTimeout(() => {
          copyButton.innerHTML = originalText;
        }, 2000);
      } catch (err) {
        console.error("Error copying to clipboard:", err);
      }
    });
  });

  // Smooth scroll for anchor links
  document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener("click", function (e) {
      e.preventDefault();
      const target = document.querySelector(this.getAttribute("href") || "");
      if (target) {
        target.scrollIntoView({
          behavior: "smooth",
          block: "start",
        });
      }
    });
  });
</script>

<style>
  .animate-fade-in {
    opacity: 0;
    animation: fadeIn 0.8s ease-out forwards;
  }

  .animate-slide-up {
    opacity: 0;
    transform: translateY(20px);
    animation: slideUp 0.6s ease-out forwards;
  }

  @keyframes fadeIn {
    to {
      opacity: 1;
    }
  }

  @keyframes slideUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
